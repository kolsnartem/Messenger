
> client@0.1.0 start
> craco start

Applying Webpack configuration...
Updated source-map-loader rule with exclude: [ /node_modules\/@signalapp\/libsignal-client/ ]
Webpack configuration applied successfully.
Dev server middlewares set up.
(node:147882) [DEP_WEBPACK_DEV_SERVER_ON_AFTER_SETUP_MIDDLEWARE] DeprecationWarning: 'onAfterSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
(Use `node --trace-deprecation ...` to show where the warning was created)
(node:147882) [DEP_WEBPACK_DEV_SERVER_ON_BEFORE_SETUP_MIDDLEWARE] DeprecationWarning: 'onBeforeSetupMiddleware' option is deprecated. Please use the 'setupMiddlewares' option.
Starting the development server...

Compiled successfully!

You can now view client in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.31.185:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully
Files successfully emitted, waiting for typecheck results...
Issues checking in progress...
ERROR in src/App.tsx:378:59
TS2339: Property 'error' does not exist on type '{}'.
    376 |     } catch (err) {
    377 |       console.error('Auth error:', err);
  > 378 |       alert(`Error: ${(err as AxiosError).response?.data?.error || (err as AxiosError).message || 'Unknown error'}`);
        |                                                           ^^^^^
    379 |     }
    380 |   };
    381 |

ERROR in src/App.tsx:450:9
TS2322: Type 'string | null' is not assignable to type 'string'.
  Type 'null' is not assignable to type 'string'.
    448 |       const newMessage: Message = {
    449 |         id: Date.now().toString(),
  > 450 |         userId,
        |         ^^^^^^
    451 |         contactId: contact.id,
    452 |         text: encryptedText,
    453 |         timestamp: Date.now(),

ERROR in src/App.tsx:459:67
TS2345: Argument of type 'string | null' is not assignable to parameter of type 'string'.
  Type 'null' is not assignable to type 'string'.
    457 |
    458 |       await webSocketService.send(newMessage);
  > 459 |       const decryptedText = await decryptMessage(newMessage.text, userId);
        |                                                                   ^^^^^^
    460 |       setMessages(prev => {
    461 |         if (prev.some(m => m.id === newMessage.id)) return prev;
    462 |         return [...prev, { ...newMessage, text: decryptedText }].sort((a, b) => a.timestamp - b.timestamp);

