/// <reference types="node" />
import ByteArray from './zkgroup/internal/ByteArray';
import { Aci } from './Address';
import { PrivateKey } from './EcKeys';
/**
 * The randomly-generated user-memorized entropy used to derive the backup key,
 *    with other possible future uses.
 *
 * Contains log_2(36^64) = ~330 bits of entropy.
 */
export declare class AccountEntropyPool {
    /**
     * Randomly generates an Account Entropy Pool and returns the canonical string
     *  representation of that pool.
     *
     * @returns cryptographically random 64 character string of characters a-z, 0-9
     */
    static generate(): string;
    /**
     * Checks whether a string can be used as an account entropy pool.
     *
     * @returns `true` if the string is a structurally valid account entropy value.
     */
    static isValid(accountEntropyPool: string): boolean;
    /**
     * Derives an SVR key from the given account entropy pool.
     *
     * `accountEntropyPool` must be a **validated** account entropy pool;
     * passing an arbitrary string here is considered a programmer error.
     */
    static deriveSvrKey(accountEntropyPool: string): Buffer;
    /**
     * Derives a backup key from the given account entropy pool.
     *
     * `accountEntropyPool` must be a **validated** account entropy pool;
     * passing an arbitrary string here is considered a programmer error.
     *
     * @see {@link BackupKey.generateRandom}
     */
    static deriveBackupKey(accountEntropyPool: string): BackupKey;
}
/**
 * A key used for many aspects of backups.
 *
 * Clients are typically concerned with two long-lived keys: a "messages" key (sometimes called "the
 * root backup key" or just "the backup key") that's derived from an {@link AccountEntropyPool}, and
 * a "media" key (formally the "media root backup key") that's not derived from anything else.
 */
export declare class BackupKey extends ByteArray {
    private readonly __type?;
    static SIZE: number;
    constructor(contents: Buffer);
    /**
     * Generates a random backup key.
     *
     * Useful for tests and for the media root backup key, which is not derived from anything else.
     *
     * @see {@link AccountEntropyPool.deriveBackupKey}
     */
    static generateRandom(): BackupKey;
    /**
     * Derives the backup ID to use given the current device's ACI.
     *
     * Used for both message and media backups.
     */
    deriveBackupId(aci: Aci): Buffer;
    /**
     * Derives the backup EC key to use given the current device's ACI.
     *
     * Used for both message and media backups.
     */
    deriveEcKey(aci: Aci): PrivateKey;
    /**
     * Derives the AES key used for encrypted fields in local backup metadata.
     *
     * Only relevant for message backup keys.
     */
    deriveLocalBackupMetadataKey(): Buffer;
    /**
     * Derives the ID for uploading media with the name `mediaName`.
     *
     * Only relevant for media backup keys.
     */
    deriveMediaId(mediaName: string): Buffer;
    /**
     * Derives the composite encryption key for re-encrypting media with the given ID.
     *
     * This is a concatenation of an HMAC key (32 bytes) and an AES-CBC key (also 32 bytes).
     *
     * Only relevant for media backup keys.
     */
    deriveMediaEncryptionKey(mediaId: Buffer): Buffer;
    /**
     * Derives the composite encryption key for uploading thumbnails with the given ID to the "transit
     * tier" CDN.
     *
     * This is a concatenation of an HMAC key (32 bytes) and an AES-CBC key (also 32 bytes).
     *
     * Only relevant for media backup keys.
     */
    deriveThumbnailTransitEncryptionKey(mediaId: Buffer): Buffer;
}
