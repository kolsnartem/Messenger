/// <reference types="node" />
/// <reference types="node" />
import * as Native from '../Native';
import * as stream from 'stream';
type CallbackType = (error?: Error | null) => void;
export type ChunkSizeChoice = {
    kind: 'everyN';
    n: number;
} | {
    kind: 'chunksOf';
    dataSize: number;
};
export declare function everyNthByte(n: number): ChunkSizeChoice;
export declare function inferChunkSize(dataSize: number): ChunkSizeChoice;
/**
 * @deprecated Use the DigestingPassThrough instead
 */
export declare class DigestingWritable extends stream.Writable {
    _nativeHandle: Native.IncrementalMac;
    _digests: Buffer[];
    constructor(key: Buffer, sizeChoice: ChunkSizeChoice);
    getFinalDigest(): Buffer;
    _write(chunk: any, encoding: BufferEncoding, callback: CallbackType): void;
    _final(callback: CallbackType): void;
}
export declare class DigestingPassThrough extends stream.Transform {
    private digester;
    constructor(key: Buffer, sizeChoice: ChunkSizeChoice);
    getFinalDigest(): Buffer;
    _transform(data: Buffer, enc: BufferEncoding, callback: CallbackType): void;
    _final(callback: CallbackType): void;
}
/**
 * @deprecated Use the ValidatingPassThrough instead
 */
export declare class ValidatingWritable extends stream.Writable {
    _nativeHandle: Native.ValidatingMac;
    _validatedBytes: number;
    constructor(key: Buffer, sizeChoice: ChunkSizeChoice, digest: Buffer);
    validatedSize(): number;
    _write(chunk: any, encoding: BufferEncoding, callback: CallbackType): void;
    _final(callback: CallbackType): void;
}
export declare class ValidatingPassThrough extends stream.Transform {
    private validator;
    private buffer;
    constructor(key: Buffer, sizeChoice: ChunkSizeChoice, digest: Buffer);
    _transform(data: Buffer, enc: BufferEncoding, callback: CallbackType): void;
    _final(callback: CallbackType): void;
}
export declare function chunkSizeInBytes(sizeChoice: ChunkSizeChoice): number;
export {};
