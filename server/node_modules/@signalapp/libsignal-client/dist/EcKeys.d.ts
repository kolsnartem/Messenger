/// <reference types="node" />
import * as Native from '../Native';
export declare class PublicKey {
    readonly _nativeHandle: Native.PublicKey;
    private constructor();
    static _fromNativeHandle(handle: Native.PublicKey): PublicKey;
    static deserialize(buf: Buffer): PublicKey;
    compare(other: PublicKey): number;
    serialize(): Buffer;
    getPublicKeyBytes(): Buffer;
    verify(msg: Buffer, sig: Buffer): boolean;
    verifyAlternateIdentity(other: PublicKey, signature: Buffer): boolean;
}
export declare class PrivateKey {
    readonly _nativeHandle: Native.PrivateKey;
    private constructor();
    static _fromNativeHandle(handle: Native.PrivateKey): PrivateKey;
    static generate(): PrivateKey;
    static deserialize(buf: Buffer): PrivateKey;
    serialize(): Buffer;
    sign(msg: Buffer): Buffer;
    agree(other_key: PublicKey): Buffer;
    getPublicKey(): PublicKey;
}
export declare class IdentityKeyPair {
    readonly publicKey: PublicKey;
    readonly privateKey: PrivateKey;
    constructor(publicKey: PublicKey, privateKey: PrivateKey);
    static generate(): IdentityKeyPair;
    static deserialize(buffer: Buffer): IdentityKeyPair;
    serialize(): Buffer;
    signAlternateIdentity(other: PublicKey): Buffer;
}
