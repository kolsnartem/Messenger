"use strict";
//
// Copyright 2020-2022 Signal Messenger, LLC.
// SPDX-License-Identifier: AGPL-3.0-only
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityKeyPair = exports.PrivateKey = exports.PublicKey = void 0;
const Native = require("../Native");
class PublicKey {
    constructor(handle) {
        this._nativeHandle = handle;
    }
    static _fromNativeHandle(handle) {
        return new PublicKey(handle);
    }
    static deserialize(buf) {
        return new PublicKey(Native.PublicKey_Deserialize(buf));
    }
    /// Returns -1, 0, or 1
    compare(other) {
        return Native.PublicKey_Compare(this, other);
    }
    serialize() {
        return Native.PublicKey_Serialize(this);
    }
    getPublicKeyBytes() {
        return Native.PublicKey_GetPublicKeyBytes(this);
    }
    verify(msg, sig) {
        return Native.PublicKey_Verify(this, msg, sig);
    }
    verifyAlternateIdentity(other, signature) {
        return Native.IdentityKey_VerifyAlternateIdentity(this, other, signature);
    }
}
exports.PublicKey = PublicKey;
class PrivateKey {
    constructor(handle) {
        this._nativeHandle = handle;
    }
    static _fromNativeHandle(handle) {
        return new PrivateKey(handle);
    }
    static generate() {
        return new PrivateKey(Native.PrivateKey_Generate());
    }
    static deserialize(buf) {
        return new PrivateKey(Native.PrivateKey_Deserialize(buf));
    }
    serialize() {
        return Native.PrivateKey_Serialize(this);
    }
    sign(msg) {
        return Native.PrivateKey_Sign(this, msg);
    }
    agree(other_key) {
        return Native.PrivateKey_Agree(this, other_key);
    }
    getPublicKey() {
        return PublicKey._fromNativeHandle(Native.PrivateKey_GetPublicKey(this));
    }
}
exports.PrivateKey = PrivateKey;
class IdentityKeyPair {
    constructor(publicKey, privateKey) {
        this.publicKey = publicKey;
        this.privateKey = privateKey;
    }
    static generate() {
        const privateKey = PrivateKey.generate();
        return new IdentityKeyPair(privateKey.getPublicKey(), privateKey);
    }
    static deserialize(buffer) {
        const { privateKey, publicKey } = Native.IdentityKeyPair_Deserialize(buffer);
        return new IdentityKeyPair(PublicKey._fromNativeHandle(publicKey), PrivateKey._fromNativeHandle(privateKey));
    }
    serialize() {
        return Native.IdentityKeyPair_Serialize(this.publicKey, this.privateKey);
    }
    signAlternateIdentity(other) {
        return Native.IdentityKeyPair_SignAlternateIdentity(this.publicKey, this.privateKey, other);
    }
}
exports.IdentityKeyPair = IdentityKeyPair;
//# sourceMappingURL=EcKeys.js.map